#!/usr/bin/perl
use strict;
use warnings;
use File::Path;
use Getopt::Long;

GetOptions( \my %conf, 'debug!', 'verbose!' )
    or die "Usaage: $0 [ --debug ] [ --verbose ]";

# prepare some basic stuff
my $depth = shift || 0;
my $dir = "sierpinski-$depth";
rmtree($dir);    # cleanup
mkpath($dir);
chdir $dir;

# prepare empty tree
`git init ; touch a ; git add a ; git commit -m empty ; git rm a ; git commit -m null`;
my $tree = `git log -1 --pretty=format:%T`;

# create root node
my $count = 0;
chomp( my $root = `echo @{ [ $count++ ] } | git commit-tree $tree` );

# a cache for nodes
my %cache;

sub child {
    my $cmd = qq{echo @{ [ $count++ ] } | git commit-tree $tree -p $_[0]};
    print "$cmd\n" if $conf{debug};
    chomp( my $node = `sleep 1; $cmd` );    # for --date-order
    print "$_[0] -> $node\n" if $conf{verbose};
    return $node;
}

sub merge {
    my @p = grep defined, @_;
    my $id = join ':', sort @p;
    my $cmd
        = qq{echo @{ [ $count++ ] } | git commit-tree $tree @{ [ map {"-p $_"} @p ] }};
    print "$cmd\n" if $conf{debug};
    return $cache{$id} if exists $cache{$id};

    chomp( $cache{$id} = `sleep 1; $cmd` );    # for --date-order
    print "$id -> $cache{$id}\n" if $conf{verbose};
    return $cache{$id};
}

sub triangle {
    my ( $n, $left, $top, $right ) = @_;

    return ( $left, merge( $left, $top, $right ) ) if !$n;

    my @top   = triangle( $n - 1, $left,            $top,    $right );
    my @left  = triangle( $n - 1, child( $top[0] ), $top[0], $top[1] );
    my @right = triangle( $n - 1, $left[1],         $top[1], $right );
    return ( $left[0], $right[1] );
}

my @nodes = triangle( $depth, child($root), $root, undef );
`git reset --hard $nodes[1]`;

