#!/usr/bin/perl
use strict;
use warnings;
use File::Path;
use Getopt::Long;

GetOptions( \my %conf, 'debug!', 'verbose!' )
    or die "Usaage: $0 [ --debug ] [ --verbose ]";

# prepare some basic stuff
my $depth = shift || 0;
my $dir = "sierpinski-$depth";
rmtree($dir);    # cleanup
mkpath($dir);
chdir $dir;

# prepare empty tree
`git init ; touch a ; git add a ; git commit -m empty ; git rm a ; git commit -m null`;
my $tree = `git log -1 --pretty=format:%T`;

# create root node
my $count = 0;
chomp( my $root = `echo @{ [ $count++ ] } | git commit-tree $tree` );

# a cache for nodes
my %cache;

sub child {
    my $cmd = qq{echo @{ [ $count++ ] } | git commit-tree $tree -p $_[0]};
    print "$cmd\n" if $conf{debug};
    chomp( my $node = `sleep 1; $cmd` );    # for --date-order
    print "$_[0] -> $node\n" if $conf{verbose};
    return $node;
}

sub merge {
    my $id = join ':', sort @_;
    my $cmd
        = qq{echo @{ [ $count++ ] } | git commit-tree $tree @{ [ map {"-p $_"} @_ ] }};
    print "$cmd\n" if $conf{debug};
    return $cache{$id} if exists $cache{$id};

    chomp( $cache{$id} = `sleep 1; $cmd` );    # for --date-order
    print "$id -> $cache{$id}\n" if $conf{verbose};
    return $cache{$id};
}

sub triangle {
    my ( $n, $top ) = @_;
    return ( ( child($top) ) x 2, $top ) if !$n;
    my @top   = triangle( $n - 1, $top );
    my @left  = triangle( $n - 1, $top[0] );
    my @right = triangle( $n - 1, merge( $top[1], $top[2] ) );
    my $m3 = merge( $left[1], $left[2], $right[0] );
    return ( $left[0], $m3, $right[2] );
}

my @nodes = triangle( $depth, $root );
my $master = merge( $nodes[1], $nodes[2] );
`git reset --hard $master`;

